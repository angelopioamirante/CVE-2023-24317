import sqlite3
import random
import string
import hashlib

blacklists = [
    "\"abcdeghijklmnopqrstuvwxyz01236798< >/*-+!(${}`.;_#\\?']",
    "|bcdefghijkmnopqrstuvwxyz0123456798\">/*-+!([)Â£${ }`.;_#\n\r?^'",
    "\"abcdefghijklmnopqrstuvwxyz01 236?<=:|\n\r\t/*-+!(]${}`.;_#'%",
    "abcdefghijklmnopqrstuvwxyz01236789\"?=:|\n\r\t\\ /*-+!(${}`.;_#'",
    "\"abcdeghjklmnoqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345798<>-+!()[]${}`.;_#\\':",
]


def random_description():
    adjectives = [
        "colorful",
        "magnificent",
        "vibrant",
        "serene",
        "majestic",
        "captivating",
        "charming",
        "enchanting",
        "peaceful",
        "picturesque",
    ]
    nouns = [
        "landscape",
        "ocean",
        "mountain",
        "forest",
        "sunset",
        "meadow",
        "waterfall",
        "countryside",
        "cityscape",
        "wildlife",
    ]
    verbs = [
        "explore",
        "discover",
        "immerse",
        "admire",
        "wander",
        "appreciate",
        "unwind",
        "experience",
        "embrace",
        "delight",
    ]
    battle_adjectives = [
        "fierce",
        "intense",
        "ferocious",
        "brutal",
        "relentless",
        "cruel",
        "savage",
        "vicious",
        "bloody",
        "deadly",
        "merciless",
        "unyielding",
        "ruthless",
        "aggressive",
        "unforgiving",
        "determined",
        "formidable",
        "unstoppable",
        "mighty",
        "daunting",
        "epic",
        "heroic",
        "valiant",
    ]

    adjective = random.choice(adjectives)
    noun = random.choice(nouns)
    verb = random.choice(verbs)
    battle_adjectives = random.choice(battle_adjectives)

    return f"A {adjective} {noun} where this account can {verb} the {battle_adjectives} of crackers."


# Create a new SQLite database in memory
db_connection = sqlite3.connect("localdb.sqlite")
db_cursor = db_connection.cursor()

# Create a table
db_cursor.execute(
    """CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT,
                    privilege INTEGER,
                    password TEXT,
                    description TEXT,
                    blacklist TEXT,
                    amount INTEGER
                );"""
)


for i in range(5):
    characters = string.ascii_letters
    username = "".join(random.choice(characters) for _ in range(11)) + random.choice(
        string.digits
    )
    tmp = b"".join(random.choice(characters).encode() for _ in range(25))
    password = hashlib.sha256(tmp).digest().hex()
    random_index = random.randint(0, len(blacklists) - 1)
    description = random_description()
    blacklist = blacklists.pop(random_index)

    db_cursor.execute(
        "INSERT INTO users (username, privilege, password, description, blacklist, amount) VALUES (?, ?, ?, ?, ?, ?)",
        (username, 0, password, description, blacklist, 100),
    )

# insert admin
username = "shadymanager"
tmp = b"".join(random.choice(characters).encode() for _ in range(25))
password = hashlib.sha256(tmp).digest().hex()
description = "I know what you are doing here, and i am doing it better."
blacklist = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c"
db_cursor.execute(
    "INSERT INTO users (username, privilege, password, description, blacklist, amount) VALUES (?, ?, ?, ?, ?, ?)",
    (username, 1, password, description, blacklist, 100),
)
db_connection.commit()

# insert intern
username = "intern"
# b''.join(random.choice(characters).encode() for _ in range(25))
tmp = b"thelast12"
password = hashlib.sha256(tmp).digest().hex()
description = "They made me work on this, even if i am a UX designer."
blacklist = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c"
db_cursor.execute(
    "INSERT INTO users (username, privilege, password, description, blacklist, amount) VALUES (?, ?, ?, ?, ?, ?);",
    (
        username,
        0,
        password,
        description,
        blacklist,
        0,
    ),
)

# Commit the changes and close the connection
db_connection.commit()
db_connection.close()
